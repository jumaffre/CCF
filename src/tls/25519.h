// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the Apache 2.0 License.
#pragma once

#include "pem.h"
#include "tls.h"

namespace tls
{
  // mbedtls does not support parsing of 25519 PEM keys.
  static std::vector<uint8_t> parse_25519_public(const Pem& public_pem)
  {
    mbedtls_pem_context pem;
    mbedtls_pem_init(&pem);

    auto pem_len = public_pem.size();

    if (
      mbedtls_pem_read_buffer(
        &pem,
        "-----BEGIN PUBLIC KEY-----",
        "-----END PUBLIC KEY-----",
        public_pem.data(),
        nullptr,
        0,
        &pem_len) != 0)
    {
      throw std::logic_error("Failed to read 25519 PEM");
    }

    auto p = pem.buf;
    auto len = pem.buflen;
    auto end = pem.buf + pem.buflen;
    if (
      mbedtls_asn1_get_tag(
        &p, end, &len, MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE) != 0)
    {
      throw std::logic_error("Failed to parse tag");
    }

    mbedtls_pk_type_t pk_alg = MBEDTLS_PK_NONE;
    mbedtls_asn1_buf alg_oid;
    mbedtls_asn1_buf alg_params;
    if (mbedtls_asn1_get_alg(&p, end, &alg_oid, &alg_params) != 0)
    {
      throw std::logic_error("Failed to parse alg");
    }

    // TODO: Check alg_oid?
    // Only 25519 curve generated by openssl?

    if (mbedtls_asn1_get_bitstring_null(&p, end, &len) != 0)
    {
      throw std::logic_error("Failed to parse bitstring");
    }

    std::vector<uint8_t> public_raw(p, end);
    mbedtls_pem_free(&pem);

    return public_raw;
  }
}